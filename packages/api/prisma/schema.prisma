// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- DB MODELS ---

// USER MODEL
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Books owned by the user
  ownedBooks    Book[]    @relation("BookOwner")// A user can have multiple books

  // Books borrowed by the user
  borrowedLoans Loan[]    @relation("Borrower")// A user can borrow multiple books

  // Books lent by the user
  lentLoans     Loan[]    @relation("Owner")// A user can lend multiple
}

// BOOK MODEL
model Book {
  id            String    @id @default(uuid())
  title         String
  subtitle      String?
  isbn_13       String?   @unique
  isbn_10       String?   @unique
  page_count    Int?
  cover_image_url String?
  published_year Int?
  description   String?
  
  ownerId       String
  owner         User      @relation("BookOwner", fields: [ownerId], references: [id])

  //Book state
  status        BookStatus @default(AVAILABLE)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  authors       Author[]
  genres        Genre[]

  // Publisher 
  publisherId   String?
  publisher     Publisher? @relation(fields: [publisherId], references: [id])

  // One book can have oly one active loan at a time
  activeLoans   Loan?
}

enum BookStatus {
  AVAILABLE
  LOANED
  WISHLIST
  LOST
}

// LOAN MODEL
model Loan {
  id            String    @id @default(uuid())
  bookId        String    @unique
  book          Book      @relation(fields: [bookId], references: [id]) 

  // Owner of the book
  ownerId       String
  owner         User      @relation("Owner", fields: [ownerId], references: [id])

  // Borrower of the book
  borrowerId    String
  borrower      User      @relation("Borrower", fields: [borrowerId], references: [id])

  loanDate      DateTime  @default(now())
  excpectedReturnDate DateTime?
  actualReturnDate DateTime?

  @@index([ownerId])
  @@index([borrowerId])
}


// --- GLOBAL MODELS --- //
model Author {
  id          String   @id @default(uuid())
  name        String   @unique
  books       Book[]
}

model Publisher {
  id          String   @id @default(uuid())
  name        String   @unique
  books       Book[]
}

model Genre {
  id          String   @id @default(uuid())
  name        String   @unique
  books       Book[]
}